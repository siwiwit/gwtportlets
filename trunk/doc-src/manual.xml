<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "docbookV4.5/docbookx.dtd" []>
<book>
  <title>GWT Portlets Framework User Manual</title>
  <bookinfo>
    <authorgroup>
      <author>
        <firstname>David</firstname>
        <surname>Tinker</surname>
      </author>
    </authorgroup>
    <copyright>
      <year>2009</year>
      <holder>Business Systems Group (Africa)</holder>
    </copyright>
    <pubdate>@DATE@</pubdate>
    <releaseinfo>Version @RELEASE@</releaseinfo>
  </bookinfo>
  <chapter id="introduction">
    <title>Introduction</title>
    <para>GWT Portlets (<ulink url="http://www.gwtportlets.org">http://www.gwtportlets.org</ulink>) is a free open source web framework for building modular GWT (Google Web Toolkit) applications. GWT provides the low level building blocks required to build web applications (Java to Javascript compiler, basic UI widgets, an RPC mechanism etc.) but typical business applications can benefit from the additional scaffolding provided by GWT Portlets. In traditional web applications this role would be fulfilled by Struts and other web frameworks as well as portal servers.</para>
    <para>The GWT Portlets framework is a library does not force a particular structure on an application. The programming model resembles that offered by JSR168 portlets and portal servers but the application creates and controls the &quot;portal server&quot; environment instead of just being deployed into it. </para>
    <para>GWT Portlets includes the following functionality:

    </para>
    <itemizedlist>
      <listitem>
        <para>A model for developing business functionality in decoupled widgets (portlets) with server side support</para>
      </listitem>
      <listitem>
        <para>An absolute positioning framework with pluggable layout managers (similar to Swing and other thick client GUI toolkits</para>
      </listitem>
      <listitem>
        <para>An in-browser runtime layout editor for arranging widgets and portlets into page layouts stored on the server</para>
      </listitem>
      <listitem>
        <para>Some widgets including a styled dialog box and theme support, but this is not the main focus of the projec</para>
      </listitem>
    </itemizedlist>
    <para>GWT Portlets is implemented in Java code and does not wrap any external Javascript libraries. It does not impose any server side framework (e.g. Spring or J2EE) but is designed to work well in conjunction with such frameworks.</para>
    <section id="usage">
      <title>Contents &amp; Usage</title>
      <para>The download distribution includes binaries, source code, demos and documentation. Everything required to use and build the framework is included. Some files required to build this manual have been excluded to reduce the size of the distribution i.e. the documentation must be built from a subversion checkout. </para>
      <para>The framework is packaged as <filename>gwt-portlets.jar</filename> and this file must be on the classpath at compile and runtime (e.g. in WEB-INF/lib). It depends on Log4j (log4j-*.jar) and optionally XStream (xstream-*.jar, xpp3_min-*.jar and xmlpull*.jar). These jars and their licenses are included in the download bundle (<filename>lib</filename> directory).</para>
      <para>Add the following line to the GWT module file for your application to use GWT Portlets:</para>
      <para><code>&lt;inherits name=&quot;org.gwtportlets.portlet.Portlets&quot;/&gt;</code></para>
    </section>
      <section id="system_requirements">
        <title>System Requirements</title>
        <para>The GWT Portlets framework has the following system requirements:</para>
        <itemizedlist>
          <listitem>
            <para>JDK 1.5 or newer</para>
          </listitem>
          <listitem>
            <para>Google Web Toolkit 1.7 or newer</para>
          </listitem>
          <listitem>
            <para>Apache Ant 1.7 or newer is required to run the demo applications</para>
          </listitem>
        </itemizedlist>
        <para>Currently it will work with GWT 1.6.x but our development and testing is done on GWT 1.7.</para>
      </section>
      <section id="demo_apps">
        <title>Demo Applications</title>
          <para>The demos (there is only one at present) are standalone applications with their own Ant build files. Each is in a separate directory under <filename>demos</filename>.</para>
          <para>To run the demos you need to:</para>
          <itemizedlist>
            <listitem>
              <para>Copy <filename>build.properties.sample</filename> to <filename>build.properties</filename> and customize it to match your environment (set your GWT installation directory etc.)</para>
            </listitem>
            <listitem>
              <para>Run <filename>ant</filename> (no arguements) at a command prompt from the root of the distribution. This will copy <filename>gwt-portlets.jar</filename>, other required jars and <filename>build.properties</filename> to each of the demos</para>
            </listitem>
            <listitem>
              <para>Each demo will now be standalone (you can copy the whole directory elsewhere to start a project). Change to <filename>demos/main</filename> and run <filename>ant -p</filename> to list targets</para>
            </listitem>
          </itemizedlist>
      </section>
    <section id="packages">
      <title>Packages</title>
      <para>The framework package layout follows standard GWT conventions:</para>
      <para><informaltable frame="all">
          <tgroup cols="2" colsep="1">
            <colspec colnum="1"/>
            <colspec colnum="2"/>
            <tbody>
              <row>
                <entry>org.gwtportlets.portlet.client</entry>
                <entry>Client side classes that are compiled to Javascript to run in the browser</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.client.edit</entry>
                <entry>The in-browser layout editor</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.client.event</entry>
                <entry>Application event broadcast support</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.client.impl</entry>
                <entry>Browser specific classes and interfaces for compile time generated code</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.client.layout</entry>
                <entry>Layout strategies</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.client.ui</entry>
                <entry>Widget library</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.client.util</entry>
                <entry>Miscelaneous utility classes</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.rebind</entry>
                <entry>GWT compile time code generators</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.public</entry>
                <entry>Stylesheets and images</entry>
              </row>
              <row>
                <entry>org.gwtportlets.portlet.server</entry>
                <entry>Server side support</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>
    </section>
  </chapter>
  <chapter id="portlets">
    <title>Portlets</title>
    <para>A portlet is a GWT Widget (it extends Composite) with features that make it easier to build GWT applications composed of decoupled components:</para>
    <itemizedlist>
      <listitem>
        <para>It can externalize its state into an instance of a PortletFactory subclass that can recreate the Portlet and/or restore its state </para>
      </listitem>
      <listitem>
        <para>It can &quot;refresh&quot; itself by sending a PortletFactory instance to the server for update (e.g. from a database) and restoring its state using the returned factory to show the new data i.e. the factory is used as a DTO (Data Transfer Object) </para>
      </listitem>
      <listitem>
        <para>It has a user friendly title </para>
      </listitem>
      <listitem>
        <para>It may be able open a dialog to configure itself</para>
      </listitem>
      <listitem>
        <para>It notifies its parent (and its parent&apos;s parent recursively) when its state changes (e.g. busy with refresh, title changed) for automatic display of AJAX loading pizza&apos;s etc. </para>
      </listitem>
      <listitem>
        <para>It can be positioned absolutely and is aware of its position and size and hence can use scrolling regions effectively </para>
      </listitem>
    </itemizedlist>
    <informalfigure>
      <mediaobject>
        <imageobject>
          <imagedata scale="75" fileref="img/portlet_heirachy.gif"/>
        </imageobject>
      </mediaobject>
    </informalfigure>
    <section id="hello_world">
      <title>Hello World</title>
      <para>This section describes the different parts of the &quot;hello world&quot;portlet from the main demo (demos/main). The Portlet class is as follows:</para>
      <programlisting>package main.client.ui;
 
import com.google.gwt.user.client.ui.*;
import org.gwtportlets.portlet.client.*;
import org.gwtportlets.portlet.client.ui.*;
 
public class HelloWorldPortlet extends Portlet {
 
    private String serverTime;
 
    private Label label = new Label();
 
    public HelloWorldPortlet() {
        initWidget(label);
    }
 
    private void restore(Factory f) {
        serverTime = f.serverTime;
        label.setText(&quot;Hello World, the time on the server is &quot; + serverTime);
    }
 
    public WidgetFactory createWidgetFactory() {
        return new Factory(this);
    }
 
    public static class Factory extends PortletFactory&lt;HelloWorldPortlet&gt; {
 
        @DoNotSendToServer public String serverTime;
 
        public Factory() { }
 
        public Factory(HelloWorldPortlet p) {
            super(p);
            serverTime = p.serverTime;
        }
 
        public void refresh(HelloWorldPortlet p) {
            super.refresh(p);
            p.restore(this);
        }
 
        public HelloWorldPortlet createWidget() {
            return new HelloWorldPortlet();
        }
    }
}</programlisting>
      <para>This portlet displays its message using a single label field. Since it is a Composite it calls initWidget(label) in the constructor.</para>
      <para>The static inner class <code>Factory extends PortletFactory {...}</code> has a single field String serverTime to hold the state of the portlet. This field is marked with the @DoNotSendToServer annotation which causes the framework to set it to null before the factory is sent to the server, reducing the amount of data transfered.</para>
      <para>The portlet method WidgetFactory createWidgetFactory() {...} creates a instance of the factory class externalizing the state of the portlet. This method is specified by the WidgetFactoryProvider interface. </para>
      <para>The refresh(HelloWorldPortlet p) {...} method in the factory restores the state of the portlet by calling its restore(Factory f) {...} method. The restore method copies data out of the factory fields into the portlet fields (serverTime) and sets the text on the label to update the GUI.</para>
      <para>PortletFactory instances are filled with data on the server side by WidgetDataProvider implementations. Data providers are named after the portlet they supply data for by convention (HelloWorldDataProvider for HelloWorldPortlet etc.). Note that a Portlet is not required to have a corresponding WidgetDataProvider (e.g. the PageTitlePortlet in the framework). </para>
      <para>Here is the &quot;hello world&quot; data provider:</para>
      <programlisting>package main.server;
 
import main.client.ui.HelloWorldPortlet;
import org.gwtportlets.portlet.server.*;
import java.text.SimpleDateFormat;
import java.util.Date;
 
public class HelloWorldDataProvider
        implements WidgetDataProvider&lt;HelloWorldPortlet.Factory&gt; {
 
    private static final SimpleDateFormat DATE_FORMAT =
            new SimpleDateFormat(&quot;dd MMM yyyy HH:mm:ss Z&quot;);
 
    public Class getWidgetFactoryClass() {
        return HelloWorldPortlet.Factory.class;
    }
 
    public void refresh(HelloWorldPortlet.Factory f, PageRequest req) {
        f.serverTime = DATE_FORMAT.format(new Date());
    }
}</programlisting>
      <para>The getWidgetFactoryClass() method just returns the factory class that the data provider populates. </para>
      <para>The refresh(HelloWorldPortlet.Factory f, PageRequest req) method populates the factory with the time on the server. The PageRequest contains information derived from the current &quot;history token&quot; on the client (the part after the # in the URL). In particular if the history token contains &quot;parameters&quot; then these are available through the PageRequest.</para>
      <para>Example: If the history token at the time of refresh is &quot;#hello_world?foo=bar&quot; then req.get(&quot;foo&quot;) will return &quot;bar&quot;. A more complex data provider might use this parameter and information from the factory to execute a database query.</para>
      <para>The page request also includes the HttpServletRequest and HttpServletResponse for the call. </para>
    </section>
  </chapter>
  <chapter id="concepts">
    <title>Other Concepts</title>
    <para>This chapter describes the key concepts and ideas used by the framework.</para>
    <section id="containers_and_layouts">
      <title>Containers &amp; Layouts</title>
      <para>The framework provides support for absolute positioning of widgets within each other and the browser viewport. Widgets (e.g. Portlets) are arranged using constraints and layout managers in a manner similar to Swing and AWT. This approach makes it possible to create scrolling regions and to build a browser based &quot;desktop style&quot; application. Static (i.e. normal browser flow) positioning can still be used for the &quot;contents&quot; of widgets and is often easier than trying to control the position and size of every button and label using absolute positioning.</para>
      <para>The Container interface extends GWTs concept of a &quot;Panel&quot; to add support for pluggable layout managers and layout constraints:</para>
      <programlisting>package org.gwtportlets.portlet.client.layout;
...
public interface Container extends HasWidgets, IndexedPanel, WidgetFactoryProvider,
          PositionAware {
    ...
    public Layout getLayout();
    public void setLayout(Layout layout);
    public LayoutConstraints getLayoutConstraints(Widget widget);
    public void setLayoutConstraints(Widget widget, LayoutConstraints constraints);
 
    /**
     * Redo this containers layout. Note that containers do not automatically
     * call layout() when widgets are added/removed etc. Only resizing the
     * container triggers automatic layout.
     */
    public void layout();
    ...
}</programlisting>
      <para>Note that Container extends PositionAware. PositionAware widgets are notified when their position and/or size may have been updated by a call to the boundsUpdated() method from the interface. Containers redo their layouts and reposition their children in response to a boundsUpdated() call.</para>
      <para>Two layouts are included with the framework:</para>
      <itemizedlist>
        <listitem>
          <para><code>RowLayout</code> Lays out widgets in a row or a column with using minimum sizes and weights to make use of available space. Nested containers using RowLayout can be used to construct &quot;border layout&quot; and others </para>
        </listitem>
        <listitem>
          <para><code>DeckLayout</code> Places widgets on top of each other. Useful for creating &quot;tab panels&quot; and for putting AJAX loading pizzas above other widgets etc. </para>
        </listitem>
      </itemizedlist>
      <para>LayoutPanel is a general purpose Container implementation used by many of the Widgets in the framework. It is covered in detail on this page and here is a small sample:</para>
      <programlisting>LayoutPanel panel = new LayoutPanel(); // defaults to RowLayout in a column
panel.add(chart); // use all free space and include scrollbars if needed 
panel.add(label, 24); // 24 pixels high, no scrollbars (overflow is hidden)
panel.layout(); // adding widgets does not automatically redo the layout</programlisting>
    </section>
    <section id="widget_factory_trees">
      <title>WidgetFactory Trees</title>
      <para>Container extends WidgetFactoryProvider so all container implementations support externalizing their state into a serializable WidgetFactory subclass that can restore that state (like Portlets). A tree of Containers and Widgets implementing WidgetFactoryProvider (e.g. Portlets) can be externalized into a tree of WidgetFactories and recreated with a few lines of code:</para>
      <programlisting>Container root = ...; // tree of Containers and Portlets
 
// get tree of WidgetFactories
WidgetFactory wf = root.createWidgetFactory(); 
 
// create a copy of the original tree (root)
Widget w = wf.createWidget(); 
wf.refresh(w);</programlisting>
      <para>Because WidgetFactories are serializable it is easy to transfer WidgetFactory trees between the client and server. This mechanism is also used to implement undo and redo and other features in the layout editor and to store layouts in XML files.</para>
      <para>The WidgetFactory interface also supports the visitor pattern for easy traversal of factory trees (e.g. when populating a tree with data from database on the server).</para>
      <programlisting>WidgetFactory wf = ...;
// visit is invoked for each factory in the tree
wf.accept(new WidgetFactoryVisitor(){
    public boolean visit(WidgetFactory wf) {...}
});</programlisting>
    </section>
    <section id="page_files">
      <title>Page Files</title>
      <para>The framework supports the conversion of WidgetFactory trees to/from XML using XStream<footnote>
          <para>http://xstream.codehaus.org/</para>
        </footnote>. Note there is no dependency on XStream i.e. other technologies can be used to persist WidgetFactory trees. However XStream is fast and produces human readable and editable XML with a minimum of configuration.</para>
      <para>Here is part of the hello_world page from the demo:</para>
      <programlisting>&lt;LayoutPanel styleName=&quot;&quot; limitMaximize=&quot;false&quot;&gt;
  &lt;widgets&gt;
    &lt;LayoutPanel styleName=&quot;&quot; limitMaximize=&quot;false&quot;&gt;
      &lt;widgets&gt;
        &lt;LayoutPanel styleName=&quot;&quot; limitMaximize=&quot;false&quot;&gt;
          &lt;widgets&gt;
            &lt;TitlePanel styleName=&quot;portlet-title&quot; title=&quot;Title&quot; titleAuto=&quot;true&quot;
                    refresh=&quot;true&quot; 
                    configure=&quot;true&quot; edit=&quot;false&quot; maximize=&quot;true&quot; limitMaximize=&quot;true&quot;&gt;
              &lt;widgets&gt;
                &lt;HelloWorldPortlet styleName=&quot;&quot;/&gt;
              &lt;/widgets&gt;
              &lt;constraints&gt;
                &lt;RowLayout-Constraints size=&quot;0.0&quot; weight=&quot;1.0&quot; maxSize=&quot;0&quot;
                    overflow=&quot;hidden&quot;/&gt;
              &lt;/constraints&gt;
...
&lt;/LayoutPanel&gt;</programlisting>
      <para>Storing the layout of an application GUI in XML files on the server has several advantages over hardcoding it into the Javascript:</para>
      <itemizedlist>
        <listitem>
          <para>The application has looser coupling i.e. the EntryPoint class does not have to &quot;know about&quot; all of its GUI components </para>
        </listitem>
        <listitem>
          <para>All factories on a page can be populated with data in a single page fetch async call </para>
        </listitem>
        <listitem>
          <para>The layout can be customized for different installations or themes</para>
        </listitem>
      </itemizedlist>
      <para>The XStream support is provided by WidgetFactoryXmlIO. This class uses XStream&apos;s alias support to avoid putting fully qualified class names into the XML files. Note that if you rename a Portlet (other than moving it to a new package) you will need to update your page files. Some simple heuristics are used to convert a fully qualified class name into a user friendly alias as described below:</para>
      <programlisting>package org.gwtportlets.portlet.server;
...
public class WidgetFactoryXmlIO {
...
    /**
     * Add an alias for cls. The alias is the simple name of the class (i.e.
     * without package) with the following modifications:&lt;br&gt;
     * &lt;li&gt;Any &apos;Factory&apos; suffix is removed
     * &lt;li&gt;Any &apos;$&apos; is replaced with &apos;-&apos; (inner class names)
     * Also omits fields annotated with DoNotPersist or DoNotSendToServer.
     */
    public void alias(Class cls) {...}
...</programlisting>
      <para>It aliases all the framework classes in its constructor. Applications will usually use Spring or a similar framework to discover all of the PortletFactory&apos;s and alias them at initialisation time.</para>
      <para>As mentioned in the Javadoc comment in the code fragment, fields annotated with DoNotPersist or DoNotSendToServer are not included in the XML. This is useful when fields in a PortletFactory are used only on the client side (DoNotSendToServer) or are used to pass information back to the server (DoNotPersist) that should not not end up in page XML files.</para>
    </section>
  </chapter>
  <chapter id="app_structure">
    <title>Application Structure</title>
    <para>This chapter  describes how to pull the different parts of the framework together to create a complete application using one of the the bundled demos (demos/main in the distribution) as an example.</para>
    <section id="app_classes">
      <title>Classes</title>
      <para>The main client side classes (main.client package) are shown in the class diagram below (blue classes are part of the GWT portlets framework, yellow classes are part of GWT):</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="100%" contentdepth="100%" scalefit="1" fileref="img/demo_client_classes.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <itemizedlist>
        <listitem>
          <para><code>Demo</code> The EntryPoint (main) class </para>
        </listitem>
        <listitem>
          <para><code>DemoService</code> The service interface (Async version not shown) </para>
        </listitem>
        <listitem>
          <para><code>DemoPage</code> DTO used to transfer WidgetFactory trees (pages) and related information from the server to client. A real application might include information on the currently logged on user etc. </para>
        </listitem>
        <listitem>
          <para><code>DemoPageEditor</code> The page editor for in browser layout editing, knows how to save pages to the server</para>
        </listitem>
        <listitem>
          <para><code>ClientAreaPanel</code> (framework) Container to fill the whole browser client area and layout child containers</para>
        </listitem>
      </itemizedlist>
      <para>The server side classes (main.server package):</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="100%" contentdepth="100%" scalefit="1" fileref="img/demo_server_classes.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <itemizedlist>
        <listitem>
          <para><code>DemoServiceImpl</code> GWT RemoteServiceServlet implementing demo.client.DemoService methods </para>
        </listitem>
        <listitem>
          <para><code>DemoPageProvider</code> Loads and saves &quot;pages&quot; (widget and portlet layouts) of the application from xml files and refreshes portlets </para>
        </listitem>
        <listitem>
          <para><code>WidgetFactoryXmlIO</code> (framework) Used to convert WidgetFactory trees to/from XML using XStream </para>
        </listitem>
        <listitem>
          <para><code>PageRequest</code> (framework) Analogous to an HttpServletRequest. It parses the history token into a page name and parameters and provides a store for per-request attributes (to share data between WidgetDataProviders) and the actual servlet request, response and context </para>
        </listitem>
      </itemizedlist>
      <para>The following (abridged) sequence diagram shows how the EntryPoint class for the demo application bootstraps the GUI from onModuleLoad():</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="100%" contentdepth="100%" scalefit="1" fileref="img/get_root_page_seq.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The DemoPage DTO contains a WidgetFactory tree for the root page and for the page loaded for the history token. It a real application it would also contain information about the currently logged on user and so on. The rootWidgetFactory is used to create a tree of Widgets that is added to the ClientAreaPanel. The root page tree should contain a PagePortlet (and other widgets and portlets).</para>
      <programlisting>public class DemoPage implements Serializable {
    public String pageName;
    public WidgetFactory widgetFactory;
    public WidgetFactory rootWidgetFactory;
    public boolean canEditPage; // is page editable?
}</programlisting>
      <para>The PagePortlet portlet displays the current page by listening for PageChangeEvents and swapping out a new tree of widgets in a content area on page changes. If the page is editable then an edit button is displayed that launches the online layout editor on click. After the ClientAreaPanel has been populated with the root page, a PageChageEvent containing the widgetFactory tree (page) for the history token is broadcast to all the widgets in the tree. This is picked up by the PagePortlet.</para>
      <programlisting>&lt;!-- Part of root.xml from the demo --&gt;
&lt;LayoutPanel styleName=&quot;&quot; limitMaximize=&quot;false&quot;&gt;
  ...
  &lt;PagePortlet styleName=&quot;portlet-page&quot; 
        appTitle=&quot;GWT Portlets Demo&quot;
        prefix=&quot;GWT Portlets Demo: &quot;/&gt;
  ...</programlisting>
      <para>Each time the history token changes (onHistoryChanged()), Demo calls DemoServiceImpl.getPage(historyToken) and the returned DemoPage DTO contains the page for the history token widgetFactory (rootWidgetFactory is null). A PageChangeEvent is broadcast and the PagePortlet displays the new page.</para>
    </section>
    <section id="event_broadcasting">
      <title>Event Broadcasting</title>
      <para>The BroadcastManager singleton supports broadcasting of application wide events to widget trees. Only widgets that implement BroadcastListener receive broadcast events. This mechanism makes it easy for &quot;global&quot; events to be communicated to all parts of the GUI in a decoupled way.</para>
      <programlisting>package org.gwtportlets.portlet.client.event;
...
public class BroadcastManager {
...
    /**
     * Send the object to all widgets from the RootPanel down.
     */
    public void broadcast(Object ev) {...}
 
    /**
     * Send the object up to the logical parent of w (and its logical parent
     * and so on) until a widget with no logical parent is reached.
     */
    public void broadcastUp(Widget w, Object ev) {...}
...</programlisting>
      <para>For example the Demo application broadcasts a PageChangeEvent when the history token changes and a new page is loaded from the server. The PagePortlet uses this event to display the new page. It in turn broadcasts a PageTitleChangeEvent when it receives a WidgetChangeEvent from the widget on the page supplying the title. The PageTitlePortlet updates its title bar when it receives the event.</para>
      <programlisting>package org.gwtportlets.portlet.client.ui;
...
public class PagePortlet extends ContainerPortlet implements BroadcastListener {
...
    public void onBroadcast(Object ev) {
        if (ev instanceof PageChangeEvent) {
            onPageChange((PageChangeEvent)ev);
        } else if (ev instanceof WidgetChangeEvent
                &amp;&amp; ((WidgetChangeEvent)ev).getSource() == titlePortlet) {
            updateTitle();
        }
    }
...
    private void updateTitle() {
        ...
        BroadcastManager.get().broadcast(new PageTitleChangeEvent(this, title));
    }
...</programlisting>
      <programlisting>package org.gwtportlets.portlet.client.ui;
...
public class PageTitlePortlet extends Portlet implements BroadcastListener {
    private Label label = new Label(&quot;Page Title&quot;);
    ...
    public void onBroadcast(Object ev) {
        if (ev instanceof PageTitleChangeEvent) {
            label.setText(((PageTitleChangeEvent)ev).getPageTitle());
        }
    }
...</programlisting>
      <para>All Portlets must call boardcastUp with a WidgetChangeEvent when their title or flags change. This happens automatically when a Portlet refreshes itself. TitlePanel uses this event to show or hide a loading spinner, to update its title bar and to decide which buttons to display (configure, refresh etc.).</para>
      <para>Applications can broadcast their own objects instead of having to couple components together directly (e.g. a LoggedOnUserPortlet might display a name and role from a LoggedOnEvent).</para>
      <para>The BroadcastManager also supports non-widget listeners for broadcast events:</para>
      <programlisting>package org.gwtportlets.portlet.client.event;
...
public class BroadcastManager {
...
    /**
     * Add listener to be notified on calls to broadcast before the
     * event is dispatched to the widget tree.
     */
    public void addObjectBroadcastListener(BroadcastListener l) {...}
    public void removeObjectBroadcastListener(BroadcastListener l) {..}
...</programlisting>
    </section>
    <section id="widget_refresh_hook">
      <title>The WidgetRefreshHook Singleton</title>
      <para>The framework does not have its own service interface. Instead it relies a WidgetRefreshHook singleton to refresh a Portlet or Widget with new data from the server. This is normally set in onModuleLoad and just invokes a service method:</para>
      <programlisting>package main.client;
...
public class Demo implements EntryPoint {
    ...
    public void onModuleLoad() {
        WidgetRefreshHook.App.set(new WidgetRefreshHook() {
            public void refresh(Widget w, WidgetFactory wf,
                    AsyncCallback&lt;WidgetFactory&gt; cb) {
                DemoService.App.get().refresh(History.getToken(), wf, cb);
            }
            public void onRefreshCallFailure(Widget w, Throwable caught) {
                Window.alert(&quot;Refresh failed: &quot; + caught);
            }
        });
        ...</programlisting>
      <para>The implementation of the service method delegates to the PageProvider to refresh the WidgetFactory tree. This simple mechanism makes it possible to refresh any portlet (actually any tree of Widgets implementing WidgetFactoryProvider) with new data without having to a new service method and code a specific async call.</para>
      <programlisting>package main.server;
...
public class DemoServiceImpl extends RemoteServiceServlet
        implements DemoService {
    private DemoPageProvider pageProvider;
    ...
    public WidgetFactory refresh(String historyToken, WidgetFactory wf) {
        pageProvider.refresh(createPageRequest(historyToken), wf);
        return wf;
    }
 
    private PageRequest createPageRequest(String historyToken) {
        PageRequest req = new PageRequest(historyToken);
        req.setServletConfig(getServletConfig());
        req.setServletRequest(getThreadLocalRequest());
        req.setServletResponse(getThreadLocalResponse());
        return req;
    }
...</programlisting>
    </section>
    <section id="widget_factory_trees_and_data_providers">
      <title>WidgetFactory Trees and Data Providers</title>
      <para>The Demo application service implementation refreshes WidgetFactory trees by delegating to the DemoPageProvider as show above. The code that handles the refresh is in the PageProvider base class and is the same code that runs after a page XML file has been read:</para>
      <programlisting>package org.gwtportlets.portlet.server;
...
public abstract class PageProvider {
...
    /** Refresh the data in the widget factory tree starting at top. */
    public void refresh(final PageRequest req, final WidgetFactory top) {
        top.accept(new WidgetFactoryVisitor() {
            public boolean visit(WidgetFactory wf) {
                WidgetDataProvider p = findWidgetDataProvider(wf);
                if (p != null) {
                    try {
                        p.refresh(wf, req);
                    } catch (Exception e) {
                        handleRefreshException(req, top, wf, e);
                    }
                }
                return true;
            }
        });
    }
 
    public WidgetDataProvider findWidgetDataProvider(WidgetFactory wf) {
        return providerMap.get(wf.getClass());
    }
 
    public void add(WidgetDataProvider p) {
        Class&lt;? extends WidgetFactory&gt; key = p.getWidgetFactoryClass();
        if (key == null) {
            throw new IllegalArgumentException(&quot;null not supported&quot;);
        }
        providerMap.put(key, p);
    }
...</programlisting>
      <para>Each WidgetFactory in the tree is visited and refreshed by a WidgetDataProvider. The provider is found by a simple map lookup using the class of the factory as the key. Note that WidgetDataProvider implementations need to be thread safe.</para>
    </section>
  </chapter>
  <chapter id="layouts">
    <title>Layouts</title>
    <para>GWT Portlets provides an absolute positioning framework with pluggable layout managers (similar to Swing and other thick client GUI toolkits). This chapter explains how LayoutPanel and its default RowLayout work.</para>
    <section id="rowlayout">
      <title>RowLayout</title>
      <para>The default layout of a LayoutPanel is RowLayout. This flexible layout manager supports arranging widgets in a horizontal row (hence the name) or in a vertical column. In both cases the spacing between widgets in pixels is controlled by an int spacing property (default is 4 pixels). LayoutPanel uses the column mode by default.</para>
      <para>The size of each widget is controlled by a RowLayout.Constraints instance with the following properties:</para>
      <itemizedlist>
        <listitem>
          <para><code>float size</code> The size of the widget in pixels (e.g. 100.0) or the fraction (0.3 for 30%) of available space it should take up</para>
        </listitem>
        <listitem>
          <para><code>float weight</code> Weighting used to allocate extra space proportionally among widgets with weight &gt; 0</para>
        </listitem>
        <listitem>
          <para><code>int maxSize</code> Maximum size of the widget in pixels or 0 for no limit </para>
        </listitem>
        <listitem>
          <para><code>String overflow</code> Value for overflow CSS style attribute to control scrollbars and clipping of the widgets content. Use one of the constants from LayoutConstraints: VISIBLE (don&apos;t clip), HIDDEN (clip), SCROLL (always show scrollbars) and AUTO (show scrollbars if needed but see warning below) </para>
        </listitem>
      </itemizedlist>
      <para>Once a widget has been positioned by a RowLayout the following additional read only properties are available:</para>
      <itemizedlist>
        <listitem>
          <para><code>int actualSize</code> The actual size of the widget in pixels</para>
        </listitem>
        <listitem>
          <para><code>int extraSize</code> The extra space allocated to it in pixels (according to its weight) </para>
        </listitem>
      </itemizedlist>
      <para>In row mode the size sets the width of each widget and the height is the height of the container. In column mode the size sets the height of each widget and the width is the width of the container.</para>
      <para>Widgets that implement HasMaximumSize are centered in the rectangle assigned to them if its width or height exceeds the maximums.</para>
      <para>The interactive RowLayout demo provides an environment to experiment with RowLayout and its constraints.</para>
    </section>
    <section id="using_layoutpanel">
      <title>Using LayoutPanel</title>
      <para>Container (implemented by LayoutPanel) has several convenient add methods that make creating many popular layouts easier:</para>
      <programlisting>package org.gwtportlets.portlet.client.ui;
...
public  class LayoutPanel extends ComplexPanel implements Container {
...
    /** Add a widget with layout constraints. This does not redo the layout.  */
    public void add(Widget widget, LayoutConstraints constraints) {...}
 
    /** Add a widget with FloatLayoutConstraints. This does not redo the layout. */
    public void add(Widget widget, float constraints) {...}
 
    /** Add a widget with StringLayoutConstraints. This does not redo the layout. */
    public void add(Widget widget, String constraints) {...}
...</programlisting>
      <para>The first method adds the widget with the specified constraints. The second and third add the widget with float and string constraints. Layouts may use these constraints to create their own specific constraints (e.g. RowLayout.Constraints) in a reasonable way (typically by using the string or float as a constructor argument). In many cases it is possible to avoid creating RowLayout.Constraints instances. </para>
      <para>The examples below are reproduced in the main demo.</para>
      <para>This example creates a typical &quot;buttons on top of scrolling body region&quot; layout:</para>
      <programlisting>LayoutPanel p = new LayoutPanel(); // has RowLayout in column by default
p.add(buttons, 22); // new RowLayout.Contraints(22): size=22 weight=0 maxSize=0
                    // overflow=hidden
p.add(body); // new RowLayout.Constraints(): size=0 weight=1.0 maxSize=0 overflow=auto
p.layout();</programlisting>
      <para>This is example has a sidebar on the left using 20% of available space with auto scrollbars, a 20 pixel margin on the right without scrollbars and the rest of the space for the body with auto scrollbars:</para>
      <programlisting>LayoutPanel p = new LayoutPanel(false); // use RowLayout in row
p.add(sidebar, 0.2f); // new RowLayout.Contraints(0.2f): size=0.2 weight=0.0 maxSize=0
                      // overflow=auto
p.add(body); // new RowLayout.Constraints(): size=0 weight=1.0 maxSize=0 overflow=auto
p.add(margin, 20);  // new RowLayout.Contraints(20): size=20 weight=0.0 maxSize=0
                    // overflow=hidden
p.layout();</programlisting>
      <para>Here is &quot;border layout&quot;:</para>
      <programlisting>LayoutPanel inner = new LayoutPanel(false); // row
inner.add(west, 0.2f);
inner.add(center);
inner.add(east, 0.2f);
 
LayoutPanel outer = new LayoutPanel(); // column
outer.add(north, 0.2f);
outer.add(inner, LayoutConstraints.HIDDEN); // avoid scrollbars in scrollbars
outer.add(south, 0.2f);
outer.layout();</programlisting>
      <para>These examples depend on the constructors for RowLayout.Constraints which are designed to make the common cases simple:</para>
      <programlisting>package org.gwtportlets.portlet.client.layout;
...
public class RowLayout implements Layout {
...
    public static class Constraints implements LayoutConstraints {
    ...
        /** Size=0.0, weight=1.0, MaxSize=0 */
        public Constraints(String overflow) {...}
 
        /** MaxSize=0, if size &lt; 1.0 overflow=AUTO else overflow=HIDDEN */
        public Constraints(float size, float weight) {...}
 
        /** Weight=0.0, maxSize=0, if size &lt; 1.0 overflow=AUTO else overflow=HIDDEN */
        public Constraints(float size) {...}
 
        /** Size 0.0, weight 1.0, maxSize=0, overflow=AUTO */
        public Constraints() {...}
...</programlisting>
    </section>
    <section id="layout_tips">
      <title>Layout Tips</title>
      <section id="scrollbars">
        <title>Scrollbars</title>
        <para>Generally it is best to avoid placing regions with overflow=auto (i.e. scrollbars if needed) inside each other. In some older browsers scrollbars may appear when not needed when the outer region is made smaller.</para>
      </section>
      <section id="tables">
        <title>Tables</title>
        <para>Tables with padding around the outer TD elements end up taking up more space that what is assigned to them by the framework. This causes unnecessary scrollbars. Likewise a table with padding and width of 100% placed inside a DIV will get scrollbars. One solution is to avoid padding on TDs on the outer edges of the table. The FormBuilder class uses CSS styles on the first and last rows and columns in the table to achieve this effect.</para>
        <para>This problem and the &quot;narrow tables exploding&quot; problem can also be solved by wrapping the table in a DIV (SimplePanel) as shown in this example:</para>
        <programlisting>LayoutPanel p = new LayoutPanel(); // widgets in a column
p.add(buttons, 22);
SimplePanel wrapper = new SimplePanel();
wrapper.add(table);
p.add(wrapper);
p.layout();</programlisting>
        <para>The width of wrapper is set to the width of the LayoutPanel and the table assumes its natural width inside it. Without the wrapper the table would be as wide as the LayoutPanel. This approach also avoids the problems with table TD padding and scrollbars.</para>
      </section>
      <section id="margins">
        <title>Margins</title>
        <para>The framework does not consider margins when laying out widgets. Use the layout spacing property and widget padding and borders to create space between widgets.</para>
      </section>
      <section id="position_aware">
        <title>PositionAware interface</title>
        <para>Widgets implementing PositionAware are notified by a call to boundsUpdated() when their position and/or size is changed. The Chart widget from the FreeMemoryPortlet uses this mechanism to size its Google Chart to fit the available space:</para>
        <programlisting>private class Chart extends Image implements PositionAware ... {
    public void boundsUpdated() {
        Rectangle r = LDOM.getContentBounds(this); // area inside our borders and padding
        // r.width, r.height == area available for chart
        ... </programlisting>
      </section>
    </section>
    <section id="ldom">
      <title>The LDOM Class</title>
      <para>LayoutPanel and Layouts use static methods in LDOM to query and set position and size related properties for widgets and elements. The methods in this class take borders and padding into account when needed. There are different LDOMImpl implementations for different browsers.</para>
      <para>The most important methods are shown in extract below: </para>
      <programlisting>package org.gwtportlets.portlet.client.layout;
...
public class LDOM {
...
    /**
     * Position the widget. If it implements {@link PositionAware} then it is notified
     * of this change. The width and height are adjusted to account for the
     * borders and padding of the widget if needed. Note that its margin is not
     * considered.
     */
    public static void setBounds(Widget w, int left, int top, int width, int height)
          {...}
    public static void setBounds(Widget w, Rectangle r) {...}
 
    /**
     * Get a bounding rectangle for w in browser client area coordinates.
     */
    public static Rectangle getBounds(Widget w) {...}
 
    /**
     * Get a bounding rectangle for the content area of w in browser client
     * area coordinates. This area excludes space used by borders and padding.
     */
    public static Rectangle getContentBounds(Widget w) {...}
...</programlisting>
    </section>
  </chapter>
  <chapter id="page_editor">
    <title>The Page Editor</title>
    <para>The framework supports editing of pages (actually any tree of Containers and Portlets) in the browser. The application using the framework controls how the page editor is launched and what happens when the user &quot;saves&quot; a page or tree. The demo application uses the PagePortlet to display pages and this portlet displays a spanner icon on the bottom right hand corner of the client area for editable pages.</para>
    <para>The appropriate code fragments from the demo are shown below:</para>
    <programlisting>package demo.client;
...
public class Demo implements EntryPoint ... {
...
    // The pageEditor is responsible for editing and saving pages (extends PageEditor)
    private DemoPageEditor pageEditor = new DemoPageEditor();
...
    private void onPageChange(final DemoPage p) {
        ...
        // The page change event knows how to edit the current page
        PageChangeEvent pce = new PageChangeEvent(this) {
            public void editPage(Container container) {
                ...
                pageEditor.startEditing(getPageName(), container);
            }
        };
        pce.setPageName(p.pageName);
        pce.setEditable(p.canEditPage);
        pce.setWidgetFactory(p.widgetFactory);
 
        // Send the event to every AppEventListener in the container tree.
        // The PagePortlet uses this event to change the widget tree in the
        // &apos;content area&apos; of the application and to display the gear icon
        // for editable pages
        BroadcastManager.get().broadcast(pce);
    }
...</programlisting>
    <para>The PagePortlet calls editPage on the PageChangeEvent when the user clicks the gear icon for an editable page and the demo starts editing using its PageEditor subclass:</para>
    <programlisting>package demo.client;
...
public class DemoPageEditor extends PageEditor {
...
    protected void savePage(WidgetFactory wf, AsyncCallback callback) {
        DemoService.App.get().savePage(getPageName(), wf,
                new AsyncCallback() {
            public void onFailure(Throwable caught) {
                Window.alert(&quot;Oops &quot; + caught);
            }
            public void onSuccess(Object result) {
                Window.alert(&quot;Saved&quot;);
            }
        });
    }
}</programlisting>
    <para>The only thing required from a PageEditor subclass is a savePage method. Override other methods if you need to customize the editor further.</para>
    <section id="using_page_editor">
      <title>Using The Editor</title>
      <para>The following screenshot (taken from a modifled version of the demo home page) shows the major components of the editor:</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata width="100%" contentdepth="100%" scalefit="1" fileref="img/page_editor1.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>The Dialog titled &quot;Layout Editor&quot; displays a button for each level in the Container tree being edited (&quot;1&quot;, &quot;2&quot; etc.) with the selected level highlighted.</para>
      <para>The image below shows how levels in the editor correspond to levels in the container tree. You can click the buttons or use the mouse wheel to change levels. There is also a context sensitive message explaining what do (&quot;Drag widgets to move or resize&quot;) and a save button. Closing this dialog stops editing.</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata scale="75" fileref="img/page_editor_tree.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>Each widget on the current level on the tree is outlined by a blue rectangle. These rectangles can be dragged around to move widgets to different positions at the same level in the tree. The thick edge of the rectangle resizes the widget and left click opens a context sensitive menu (not all the options listed below are visible in the screenshot):</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="italic">Edit Constraints...</emphasis> Opens a dialog to edit layout constraints for the widget </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Pickup</emphasis> Pickup the widget and click to drop it somewhere else. Change levels (use the mouse wheel) while &quot;holding&quot; a widget to move widgets between levels in the tree</para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Delete</emphasis>... Delete the widget </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Replace With &gt;</emphasis> Replace the widget with a different widget. If the new widget is a Container then the widget is placed inside the container. This is very useful for &quot;splitting&quot; the space occupied by a widget into a row or column and for putting widgets inside TitlePanel&apos;s </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Style &gt;</emphasis> Set the CSS style for the widget. The list of styles can be changed by overriding PageEditor.getStyleNamesFor(Widget) </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Edit...</emphasis> Edit settings for the widget that was clicked (in this case a TitlePanel) </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Configure...</emphasis> Configure the Portlet that was clicked (if it supports configure e.g. FreeMemoryPortlet) </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Parent Container &gt;</emphasis> Edit settiings for the parent container of the clicked widget </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Undo</emphasis> Undo the last action </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Redo</emphasis> Redo the last undone action </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Add &gt;</emphasis> Select a new widget or container and click to drop it </para>
        </listitem>
      </itemizedlist>
      <para>Don&apos;t forget to click <emphasis role="italic">Save</emphasis> to save changes.</para>
    </section>
  </chapter>
  <chapter id="ui_widgets">
    <title>UI Widgets</title>
    <para>The framework includes useful portlets and the widgets needed for its own UI (to avoid having to depend on other GWT libraries). The aim of the GWT Portlets framework is to make it easier to produce modular, decoupled business applications using GWT, not to create a widget library.</para>
    <section id="dialog_and_cssbutton">
      <title>Dialog and CssButton</title>
      <para>Dialog is a replacement for the standard GWT dialog box. It includes a title bar with maximize/restore and close buttons, content area, button bar, is styled using CSS and image sprites, is themable, prevents the application from receiving events (even mouse overs and so on) when modal, triggers close when escape is presssed and absolutely positions its contents.</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata scale="75" fileref="img/dialog.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>CssButton is a Button subclass styled using a CSS background image sprite. It is lightweight (rendered using a single BUTTON element) and supports rollover. It selects different background sprites based on the width of the button avoiding scaling effects.</para>
      <para>Here is a code fragment taken from FreeMemoryPortlet that creates its configuration dialog:</para>
      <programlisting>package demo.client.ui;
...
public class FreeMemoryPortlet extends Portlet {
...
    public void configure() {
        final ListBox type = ...
        FormBuilder b = new FormBuilder();
        b.label(&quot;Chart type&quot;).field(type).endRow();
 
        final Dialog dlg = new Dialog();
        dlg.setText(&quot;Configure &quot; + getWidgetName());
        dlg.setWidget(b.getForm());
        dlg.addButton(new CssButton(&quot;Revert&quot;, new ClickHandler() {
            public void onClick(ClickEvent ev) {...}
        }, &quot;Undo changes&quot;));
        dlg.addCloseButton();
        dlg.showNextTo(this);
    }
...</programlisting>
      <para>The content area of the dialog can be populated with a single widget by calling setWidget (like a standard GWT DialogBox) or multiple widgets can be added (getContent().add(Widget,...)). The setWidget method wraps widgets with a TABLE element in a SimplePanel (DIV) styled to add 4px padding.</para>
      <para>The body of the Dialog is a RefreshPanel. This will display a AJAX loading pizza inside the dialog if it contains a Portlet and the portlet is refreshed.</para>
      <para>The showNextTo method will position the dialog next to another widget. If there is more space to the right or left then the dialog will be positioned there, otherwise it is placed below or above. It will center the dialog if there is not enough space anywhere.</para>
    </section>
    <section id="form_builder">
      <title>FormBuilder</title>
      <para>FormBuilder is not actually a widget itself, it creates a form (labels and fields etc.) based on a GWT FlexTable</para>
      <informalfigure>
        <mediaobject>
          <imageobject>
            <imagedata scale="75" fileref="img/formbuilder1.gif"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
      <para>It keeps track of the current row and column in the table and creates labels and fields using standard styles. Some methods add new cells and others operate on the most recently added cell as shown in the following code fragment:</para>
      <programlisting>CheckBox column = new CheckBox(&quot;Layout in column&quot;);
TextBox spacing = new TextBox();
 
FormBuilder b = new FormBuilder();
b.label(&quot;Spacing&quot;).field(spacing).endRow();
b.field(column).colspan(2).endRow(); // checkbox spans 2 columns
FlexTable form = b.getForm();</programlisting>
      <para>FormBuilder styles the table so that the spacing between TDs inside is even (default is 4px) but the outer TDs (first row, last row, first column and last column) do not have any padding on the outside. This makes it easier to nest forms, to maintain consistent spacing and avoid problems with tables and spacing inside scrolling regions.</para>
    </section>
    <section id="title_panel">
      <title>TitlePanel</title>
      <para>TitlePanel is a Portlet and Container that contains other portlets. Each of the portlets in the home page of the demo is contained in a TitlePanel. It provides a title bar, refresh, configure and maximize buttons and displays an AJAX loading pizza when the first Portlet it contains is refreshing.</para>
      <mediaobject>
        <imageobject>
          <imagedata scale="75" fileref="img/title_panel_dialog.gif"/>
        </imageobject>
      </mediaobject>
      <para>The dialog on the right is displayed by clicking a TitlePanel in the page editor and selecting Edit Title... from the popup menu. The options are as follows:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis role="italic">Automatically use title from content</emphasis> Display the title provide by the first portlet in the panel or use the title captured here </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Refresh button</emphasis> Display a refresh button in the title bar that refreshes the contents of the panel </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Configure button</emphasis> Display a configure button if the first portlet in the panel supports configure. This invokes the portlets configure() method </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Maxmimize button</emphasis> Display a maximize button that will expand the TitlePanel up to the next maximize limit point (typically whole page content area) </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">Limit size of maximizing child widgets</emphasis> Contained widgets with maximize support (e.g. nested TitlePanel&apos;s) will maximize to the boundarys of this TitlePanel before getting bigger </para>
        </listitem>
        <listitem>
          <para><emphasis role="italic">User may select contained widget using configure</emphasis> Users may select a different Portlet to go into this TitlePanel using the configure button. If the currently contained Portlet supports configure then the user is prompted to replace it with something else or configure it </para>
        </listitem>
      </itemizedlist>
    </section>
    <section id="web_app_content_portlet">
      <title>WebAppContentPortlet</title>
      <para>The WebAppContentPortlet displays any content served from the web application including JSP pages, static HTML, servlets and so on. It is configured with the path to the content as shown in the main demo (demos/main).</para>
    </section>
    <section id="menu_portlet">
      <title>MenuPortlet</title>
      <para>The MenuPortlet displays a lightweight HTML menu generated from an HTML template served from the web application (a JSP page, static HTML etc.). It is configured with the path to the template as shown in the main demo (demos/main)</para>
      <para>The template for the demo application (menu.html) is shown below: </para>
      <programlisting>&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;
&lt;a href=&quot;#portlets()&quot;&gt;Portlets&lt;/a&gt;
&lt;a href=&quot;#commands()&quot;&gt;Commands&lt;/a&gt;
 
&lt;div id=&quot;portlets&quot;&gt;
    &lt;a href=&quot;#hello_world&quot;&gt;Hello World&lt;/a&gt;
    &lt;a href=&quot;#free_memory&quot;&gt;Free Memory&lt;/a&gt;
    &lt;a href=&quot;#web_app_content&quot;&gt;Web App Content&lt;/a&gt;
    &lt;a href=&quot;#row_layout&quot;&gt;Row Layout&lt;/a&gt;
&lt;/div&gt;
 
&lt;div id=&quot;commands&quot;&gt;
    &lt;a href=&quot;#command_demo&quot;&gt;Command Demo&lt;/a&gt;
    &lt;a href=&quot;#command1(arg1,arg2)&quot;&gt;Command1&lt;/a&gt;
    &lt;a href=&quot;#command2()&quot;&gt;Command2&lt;/a&gt;
    &lt;a href=&quot;#command3()&quot;&gt;Command3&lt;/a&gt;
&lt;/div&gt;</programlisting>
      <itemizedlist>
        <listitem>
          <para>Menu items are normal links and can contain history tokens (&apos;<code>#home</code>&apos;), external links and commands (&apos;<code>#command1(arg1,arg2)</code>&apos;). Note that other HTML elements may be present </para>
        </listitem>
        <listitem>
          <para>Submenus are identified by top level DIVs with id attributes e.g. <code>&lt;div id=&quot;portlets&quot;&gt;</code></para>
        </listitem>
        <listitem>
          <para>Menu items that activate sub menus have a matching href attribute and round brackets e.g. <code>&lt;a href=&quot;#portlets()&quot;&gt;Portlets&lt;/a&gt;</code></para>
        </listitem>
        <listitem>
          <para>History token links with round brackets that do not activate sub menus broadcast a CommandEvent to all widgets when clicked </para>
        </listitem>
      </itemizedlist>
      <para>The CommandDemoPortlet on command demo page displays the most recent CommandEvent received.</para>
    </section>
    <section id="page_portlet">
      <title>PagePortlet</title>
      <para>PagePortlet listens for PageChangeEvent&apos;s and displays the widgets for the new page in its &quot;content&quot; area. If the page is editable then an edit button is displayed that launches the page editor on click.</para>
      <para>It updates the browser window title and broadcasts a PageTitleChangeEvent when the title of the first Portlet on the page changes. The application title and prefix used to construct the browser window title can be configured by selecting<emphasis role="italic"> Configure...</emphasis> for on the PagePortlet in the PageEditor.</para>
      <para>It is styled <code>portlet-page</code> by default.</para>
    </section>
    <section id="page_title_portlet">
      <title>PageTitlePortlet</title>
      <para>PageTitlePortlet listens for PageTitleChangeEvent&apos;s and updates a title label. It is styled <code>portlet-page-title</code> by default.</para>
    </section>
    <section id="tool_button">
      <title>ToolButton</title>
      <para>ToolButton displays a small icon defined by a CSS background image sprite with rollover and disabled support. </para>
      <programlisting>ToolButton edit = new ToolButton(ToolButton.CONFIGURE, &quot;Edit Page&quot;, new ClickListener() {
    public void onClick(Widget sender) {...}
});</programlisting>
    </section>
    <section id="shadow_panel">
      <title>ShadowPanel</title>
      <para>ShadowPanel adds a fuzzy shadow to a single widget. The look of the shadow is controlled by the theme.</para>
      <programlisting>Widget w = ...
ShadowPanel sp = new ShadowPanel(w);</programlisting>
    </section>
  </chapter>
  <chapter id="themes">
    <title>Theme Support</title>
    <para>The framework themes its widgets using a singleton Theme instance, theme CSS files and Javascript maps. Several themes are bundled with the framework. The CSS for BlueGradient is included in gwt-portlets.css as it is the default theme. The selected theme stored in a cookie.</para>
    <section id="theme_singleton">
      <title>The Theme Singleton</title>
      <para>The Theme class supports querying available themes and changing the theme:</para>
      <programlisting>package org.gwtportlets.portlet.client.ui;
...
public class Theme {
    /** Get the singleton Theme instance. */
    public static Theme get() {...}
 
    /** Get the name of the currently selected theme. */
    public String getCurrentTheme() {...}
 
    /** Get the names of the available themes.  */
    public String[] getThemes() {...}
 
    /**
     * Change to a different theme or NOP if the theme is already active.
     * Expects to find a gwt-portlets-&lt;name&gt;.css stylesheet (unless the default
     * &apos;BlueGradient&apos; theme is selected) and an optional
     * gwt_portlets_&lt;name&gt; Javascript object with overrides for dimensions
     * of dialog headers and whatnot. &lt;b&gt;NB: This method reloads the
     * application if the theme is changed.&lt;/b&gt;
     */
    public void changeTheme(String name) {...}
...</programlisting>
      <para>The demo includes a ThemeListPortlet to display and change the theme.</para>
      <para>The list of available themes may be changed by defining a Javascript object in your bootstrap HTML file:</para>
      <programlisting>&lt;script type=&quot;text/javascript&quot;&gt;
var gwt_portlets = {
    themes: &quot;BlueGradient, LightBlue, MyTheme&quot;
};
&lt;/script&gt;</programlisting>
    </section>
    <section id="creating_themes">
      <title>Creating Themes</title>
      <para>Defining a new theme that has the same dimensions for UI elements (e.g. dialog title bar height) involves creating just a CSS file. Here is <filename>gwt-portlets-LightBlue.css</filename>:</para>
      <programlisting>.portlet-dialog-header-bg,
.portlet-dialog-footer-bg {
    background-image: url( &quot;img/portlet-dialog-blue.png&quot; );
}
 
.portlet-dialog-sides-bg {
    background-image: url( &quot;img/portlet-dialog-sides-blue.png&quot; );
}
 
.portlet-title-header-bg {
    background-image: url( &quot;img/portlet-caption-blue.gif&quot; );
}
 
.portlet-dialog-content {
    background-color: #dae7f6;
}
 
.portlet-dialog-content-body {
    border: 1px solid #99bbe8;
}
 
.portlet-dialog-buttonbar {
    background-color: #dae7f6;
}
 
.portlet-title-body {
    border-left: 1px solid #99bbe8;
    border-right: 1px solid #99bbe8;
    border-bottom: 1px solid #99bbe8;
}</programlisting>
      <para>If your theme changes the dimensions of things (e.g. dialog title bar height) then you also need to define a Javascript object (typically in your bootstrap HTML file):</para>
      <programlisting>&lt;script type=&quot;text/javascript&quot;&gt;
var gwt_portlets_MyTheme = {
    titleBarHeight: 20;
    titleBarLeftWidth : 6;
    ...
};
&lt;/script&gt;</programlisting>
      <para>The framework widgets ask the Theme singleton to apply the selected theme, typically when their style is set:</para>
      <programlisting>public class Dialog extends PopupPanel {
...
    public void setStyleName(String style) {
        ...
        Theme.get().updateDialog(this);
        ...</programlisting>
      <programlisting>public class Theme {
...
    /** Configure the dimensions of the dialog. */
    public void updateDialog(Dialog dlg) {
        EdgeRow header = dlg.getHeader();
        header.setDimensions(0, dialogHeaderHeight, dialogHeaderLeftWidth,
            dialogHeaderRightWidth);
        ...</programlisting>
      <para>If you want your own widgets to use the same mechanism you may need to extend Theme and call Theme.set(Theme instance) in onModuleLoad.</para>
    </section>
  </chapter>
  <chapter id="spring">
    <title>Integrating with Spring</title>
    <para>Spring is a platform for building Enterprise Java applications. It provides lifecycle management and wiring for application components (among other features). A Spring / GWT Portlets application will typically do the following:</para>
    <itemizedlist>
      <listitem>
        <para>Annotate WidgetDataProviders with <code>@Service</code> or <code>@Repository</code> to make them Spring beans</para>
      </listitem>
      <listitem>
        <para>Make the application PageProvider a Spring bean with an <code>@Autowired</code> WidgetDataProvider[] property to discover all WidgetDataProviders </para>
      </listitem>
    </itemizedlist>
    <para>A complete demo application using Spring and JPA (Java Persistence API) will added to the distribution soon.</para>
  </chapter>
</book>
